/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_CORE_HUB_HPP
#define BIND_CORE_HUB_HPP

namespace bind { namespace transport {

    using model::revision;
    using model::any;

    template<device D, locality L = locality::common>
    struct hub {
        static void sync(revision*& r, revision*& s){
            if(bind::nodes::size() == 1) return; // serial
            if(model::common(r)) return;
            if(model::local(r)) core::set<revision>::spawn(*r);
            else core::get<revision>::spawn(*r);
        }
    };

    template<device D>
    struct hub<D, locality::local> {
        static void sync(revision*& r, revision*& s){
            if(model::common(r)) return;
            if(!model::local(r)) core::get<revision>::spawn(*r);
        }
        static void sync(any* v){
            if(bind::nodes::size() == 1) return;
            core::set<any>::spawn(*v);
        }
    };

    template<device D>
    struct hub<D, locality::remote> {
        static void sync(revision*& r, revision*& s){
            if(r->owner == bind::nodes::which_() || model::common(r)) return;
            if(model::local(r)) core::set<revision>::spawn(*r);
            else core::get<revision>::spawn(*r); // assist
        }
        static void sync(any* v){
            core::get<any>::spawn(*v);
        }
    };

    #ifdef CUDART_VERSION
    // if(r->owner != bind::nodes::which_() && model::local(r)) I will transfer
    template<locality L>
    struct hub<device::cpu, L> : public hub<device::any, L> {
        static void sync(revision*& r, revision*& s){
            if(model::gpu(r)){
                if(!s) cuda::transfer<device::gpu, device::cpu>::spawn(r, s); 
                std::swap(r, s);
            }
            hub<device::any, L>::sync(r, s);
        }
    };

    template<locality L>
    struct hub<device::gpu, L> : public hub<device::any, L> {
        static void sync(revision*& r, revision*& s){
            if(model::cpu(r) && L != locality::remote){
                if(!s) cuda::transfer<device::cpu, device::gpu>::spawn(r, s);
                std::swap(r, s);
            }
        }
    };
    #endif
} }

#endif
