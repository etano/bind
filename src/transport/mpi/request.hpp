/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_TRANSPORT_MPI_REQUEST_HPP
#define BIND_TRANSPORT_MPI_REQUEST_HPP

namespace bind { namespace transport { namespace mpi {

    // type information required //
    inline request_impl::request_impl(void(*impl)(request_impl*), typename channel::scalar_type& v, rank_t target, int tag)
    : extent(v.size/sizeof(double)), 
      data(&v.value),
      target(target),
      impl(impl),
      tag(tag),
      once(false)
    {
    }
    // type information required //
    inline request_impl::request_impl(void(*impl)(request_impl*), typename channel::block_type& r, rank_t target, int tag)
    : extent(r.spec.extent/sizeof(double)), 
      data(r.data),
      target(target),
      impl(impl),
      tag(tag),
      once(false)
    {
    }
    inline bool request_impl::operator()(){
        if(!once){ impl(this); once = true; }
        return test_impl(this);
    }

    inline bool request::operator()(){
        int length = primaries.size();
        for(int i = 0; i < length; i++){
            if(!(*primaries[i])()) return false;
        }
        primaries.clear();
        length = callbacks.size();
        for(int i = 0; i < length; i++){
            if(!(*callbacks[i])()) return false;
        }
        return true;
    }
    inline void request::operator &= (request_impl* r){
        primaries.push_back(r);
    }
    inline void request::operator += (request_impl* r){
        callbacks.push_back(r);
    }

} } }

#endif
