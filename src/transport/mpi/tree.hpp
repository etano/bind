/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_TRANSPORT_MPI_TREE
#define BIND_TRANSPORT_MPI_TREE

#define BOUNDARY_OVERFLOW -1

namespace bind {

    template<typename T>
    class binary_tree {
    public:
        binary_tree(size_t N) : tree(N), length(N) {
            entry_point = N/2;
            generate(tree, N, N);
            normalize();
            check();
        }
        T generate(std::vector<std::pair<T,T> >& tree, int N, int L, int start = 0){
            if(N <= 0 || start >= L) return BOUNDARY_OVERFLOW;
            tree[start+N/2] = std::make_pair(generate(tree, N/2, L, start), 
                                             generate(tree, N-N/2-1, L, start+N/2+1));
            return start+N/2;
        }
        void normalize(){
            std::vector<std::pair<T,T> > normalized(length);
            for(int i = 0; i < length; i++){
                normalized[i] = tree[(i+entry_point)%length];
                if(normalized[i].first  != BOUNDARY_OVERFLOW) normalized[i].first  = (normalized[i].first  - entry_point + length) % length;
                if(normalized[i].second != BOUNDARY_OVERFLOW) normalized[i].second = (normalized[i].second - entry_point + length) % length;
            }
            std::swap(tree, normalized);
            entry_point = 0;
        }
        void check(){
            std::vector<bool> states(length);
            for(int i = 0; i < length; i++){
                if(tree[i].first  != BOUNDARY_OVERFLOW) states[tree[i].first]  = true;
                if(tree[i].second != BOUNDARY_OVERFLOW) states[tree[i].second] = true;
            }
            for(int i = 0; i < length; i++){
                if(!states[i] && i != entry_point) throw std::runtime_error("Error: no route to host");
            }
        }
        std::pair<T,T> operator[](int i) const {
            return tree[i];
        }
    private:
        std::vector<std::pair<T,T> > tree;
        int entry_point;
        size_t length;
    };
}

#undef BOUNDARY_OVERFLOW
#endif
