/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_MEMORY_CPU_DATA_BULK
#define BIND_MEMORY_CPU_DATA_BULK

#include "utils/rss.hpp"
#include "bind/utils/env.hpp"
#define DEFAULT_LIMIT 10

namespace bind { namespace memory { namespace cpu {

    class data_bulk : public bulk {
        data_bulk(){
            this->soft_limit = (bind::isset("BIND_DATA_BULK_LIMIT") ? bind::getint("BIND_DATA_BULK_LIMIT") : DEFAULT_LIMIT) * 
                               ((double)getRSSLimit() / BIND_DATA_BULK_CHUNK / 100);
        }
    public:
        static data_bulk& instance(){
            static data_bulk singleton; return singleton;
        }
        static void* soft_malloc(size_t s){
            if(instance().soft_limit < factory<BIND_DATA_BULK_CHUNK>::size() || s > BIND_DATA_BULK_CHUNK) return NULL;
            return instance().memory.malloc(s);
        }

        static void drop(){
            instance().memory.reset();
            if(instance().soft_limit < factory<BIND_DATA_BULK_CHUNK>::size())
                factory<BIND_DATA_BULK_CHUNK>::deallocate();
            factory<BIND_DATA_BULK_CHUNK>::reset();
        }
    private:
        region<BIND_DATA_BULK_CHUNK, factory<BIND_DATA_BULK_CHUNK> > memory;
        size_t soft_limit;
    };

} } }

#undef DEFAULT_LIMIT
#endif
