/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_CONTAINER_VECTOR_VECTOR_ASYNC_HPP
#define BIND_CONTAINER_VECTOR_VECTOR_ASYNC_HPP

namespace bind {

    /* disabled methods, sync mode only (throw) */

    template<class T, class Allocator>
    void vector_async<T,Allocator>::reserve(size_t sz){
        throw std::runtime_error("Error: can't realloc in async mode.");
    }

    template<class T, class Allocator>
    void vector_async<T,Allocator>::shrink_to_fit(){
        throw std::runtime_error("Error: can't realloc in async mode.");
    }

    template<class T, class Allocator>
    size_t vector_async<T,Allocator>::measure() const {
        throw std::runtime_error("Error: can't measure in async mode.");
    }

    template<typename T, class Allocator>
    void vector_async<T,Allocator>::load() const {
        throw std::runtime_error("Error: can't load in async mode.");
    }

    /* using immidiate size */

    template<class T, class Allocator>
    void vector_async<T,Allocator>::swap(vector<T,Allocator>& r){
        std::swap(this->bind_allocator.after->data, r.bind_allocator.after->data);
    }

    template<class T, class Allocator>
    size_t vector_async<T,Allocator>::size() const {
        return bind::delegated(*this).size_;
    }

    template<class T, class Allocator>
    bool vector_async<T,Allocator>::empty() const {
        return (size() == 0);
    }

    template<class T, class Allocator>
    void vector_async<T,Allocator>::resize(size_t sz){
        bind::delegated(*this).size_ = sz;
    }

    template<typename T, class Allocator>
    void vector_async<T,Allocator>::clear(){
        this->resize(0);
    }

    /* using data-access */

    template<class T, class Allocator>
    void vector_async<T,Allocator>::push_back(value_type value){
        if(this->size() == this->capacity()) printf("Capacity overflow!\n");
        (*this)[size()] = value;
        resize(size()+1);
    }

    template<class T, class Allocator>
    void vector_async<T,Allocator>::pop_back(){
        resize(size()-1);
    }

    template<typename T, class Allocator>
    typename vector_async<T,Allocator>::iterator vector_async<T,Allocator>::insert(const_iterator position, value_type val){
        for(int i = size(); i > (position-this->cbegin()); i--)
            (*this)[i] = (*this)[i-1];
        (*this)[position-this->cbegin()] = val;
        resize(size()+1);
        return (this->begin()+(position-this->cbegin()));
    }

    template<typename T, class Allocator>
    typename vector_async<T,Allocator>::iterator vector_async<T,Allocator>::erase(const_iterator position){
        for(int i = (position-this->cbegin()); i < size()-1; i++)
            (*this)[i] = (*this)[i+1];
        resize(size()-1);
        return (this->begin()+(position-this->cbegin()));
    }

}

#endif
