/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_CONTAINER_VECTOR_VECTOR_ASYNC_H
#define BIND_CONTAINER_VECTOR_VECTOR_ASYNC_H


namespace bind {

    template <class T, class Allocator>
    class vector_async : public vector<T,Allocator> {
    public:
        typedef typename vector<T,Allocator>::allocator_type allocator_type;
        typedef typename vector<T,Allocator>::value_type value_type;
        typedef typename vector<T,Allocator>::size_type size_type;
        typedef typename vector<T,Allocator>::difference_type difference_type;
        typedef typename vector<T,Allocator>::iterator iterator;
        typedef typename vector<T,Allocator>::const_iterator const_iterator;
        explicit vector_async(){}

        /* disabled methods, sync mode only (throw) */

        /* from vector.h */
        /* vector(size_t n, T value = T());
           vector(const vector& a);
           vector& operator = (const vector& rhs);
           template<class OtherAllocator>
           vector& operator = (const vector<T,OtherAllocator>& rhs);
           
           void init(T value);
           void auto_reserve();*/

        virtual void reserve(size_t n);
        virtual void shrink_to_fit();
        virtual size_t measure() const;
        virtual void load() const;

        /* using immidiate size */

        virtual void swap(vector<T,Allocator>& r);
        virtual size_t size() const;
        virtual bool empty() const;
        virtual void resize(size_t sz);
        virtual void clear();

        /* using data-access */

        /* from vector.h */
        /* value_type* data();
           value_type& operator[](size_t i);
           value_type& at(size_type i);
           value_type& front();
           value_type& back();
           iterator begin();
           iterator end(); */

        virtual void push_back(value_type value);
        virtual void pop_back();
        virtual iterator insert(const_iterator position, value_type val);
        virtual iterator erase(const_iterator position);
    };

}

#endif
