/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_MEMORY_CPU_INSTR_BULK_H
#define BIND_MEMORY_CPU_INSTR_BULK_H

namespace bind { namespace memory { namespace cpu {

    struct instr_bulk {
        template<class T>
        class allocator {
        public:
            typedef T value_type;
            template <class U> struct rebind { typedef allocator<U> other; };
            allocator() throw() { }
            allocator(const allocator&) throw() { }
            template<typename U> allocator(const allocator<U>&) throw() { }
           ~allocator() throw() { }
            static void deallocate(T* p, size_t n){ }
            static T* allocate(size_t n){
                return (T*)instr_bulk::malloc(n*sizeof(T));
            }
        };

        static instr_bulk& instance(){
            static instr_bulk singleton; return singleton;
        }
        template<size_t S> 
        static void* malloc(){
            return malloc(S);
        }
        static void* malloc(size_t s){
            return instance().impl.malloc(s);
        }
        static void drop(){
            instance().impl.reset();
        }
    private:
        memory::private_region<BIND_INSTR_BULK_CHUNK, 
                               memory::private_factory<BIND_INSTR_BULK_CHUNK> 
                              > impl;
    };

} } }

#endif

