/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_MEMORY_DESCRIPTOR
#define BIND_MEMORY_DESCRIPTOR

namespace bind { namespace memory {

    template<class MemoryTypes>
    struct hub;

    struct descriptor {
        template<class MemoryTypes> friend struct hub;
        descriptor(size_t e, types::id_type t = types::none) : extent(e), type(t), tmp(false) {}

        void free(void* ptr){
            if(!ptr) return;
            switch(type){
                case types::none: return;
                case types::cpu::standard: cpu::standard::free(ptr); break;
                #ifdef CUDART_VERSION
                case types::gpu::standard: gpu::standard::free(ptr); break;
                #endif
                default: return;
            }
            type = types::none;
        }
        template<class Memory>
        void* hard_malloc(){
            type = Memory::type;
            return Memory::malloc(extent);
        }
        template<class MemoryTypes>
        void* malloc(){
            return hub<MemoryTypes>::malloc(*this);
        }
        template<class MemoryTypes>
        void* calloc(){
            void* m = hub<MemoryTypes>::malloc(*this);
            hub<MemoryTypes>::memset(*this, m);
            return m;
        }
        template<class MemoryTypes>
        void memcpy(void* dst, void* src, descriptor& src_desc){
            hub<MemoryTypes>::memcpy(*this, dst, src_desc, src);
        }
        template<class MemoryTypes>
        bool conserves(descriptor& p){
            return hub<MemoryTypes>::conserves(*this, p);
        }
        void reuse(descriptor& d){
            type = d.type;
            d.type = types::none;
        }
        void temporary(bool t){
            tmp = t;
        }
    public:
        const size_t extent;
    private:
        types::id_type type;
        bool tmp;
    };

} }

#endif
