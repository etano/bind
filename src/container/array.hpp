/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_CONTAINER_ARRAY_HPP
#define BIND_CONTAINER_ARRAY_HPP

namespace bind {

    // {{{ array helper functions
    template<class T, class Allocator> class array;
    namespace detail {
        template<class T, class Allocator>
        void fill_array(volatile bind::array<T,Allocator>& a, T& value){
            for(size_t i = 0; i < a.size(); ++i) a[i] = value;
        }
        template<class T, class Allocator, class OtherAllocator = Allocator>
        void copy_array(volatile bind::array<T,Allocator>& dst, const bind::array<T,OtherAllocator>& src, const size_t& n){
            for(size_t i = 0; i < n; ++i) dst[i] = src[i];
        }
    }
    // }}}

    template<class T, class Allocator>
    array<T,Allocator>::array(size_t n) : allocator_(n*sizeof(T)), size_(n) {
    }

    template <typename T, class Allocator>
    array<T,Allocator>& array<T,Allocator>::operator = (const array& rhs){
        array c(rhs);
        this->swap(c);
        return *this;
    }

    template <typename T, class Allocator>
    template <class OtherAllocator>
    array<T,Allocator>& array<T,Allocator>::operator = (const array<T,OtherAllocator>& rhs){
        array resized(rhs.size());
        this->swap(resized);
        if(!bind::weak(rhs)) bind::cpu(detail::copy_array<T,Allocator,OtherAllocator>, *this, rhs, this->size_);
        return *this;
    }

    template<class T, class Allocator>
    void array<T,Allocator>::fill(T value){
        bind::cpu(detail::fill_array<T,Allocator>, *this, value);
    }

    template<class T, class Allocator>
    void array<T,Allocator>::swap(array<T,Allocator>& r){
        std::swap(this->size_, r.size_);
        std::swap(this->allocator_.after->data, r.allocator_.after->data); // fixme
    }

    template<class T, class Allocator>
    size_t array<T,Allocator>::size() const volatile {
        return size_;
    }

    template<class T, class Allocator>
    bool array<T,Allocator>::empty() const volatile {
        return ((size() == 0) || bind::weak(*this));
    }

    template<class T, class Allocator>
    typename array<T,Allocator>::value_type* array<T,Allocator>::data() volatile {
        return (value_type*)allocator_.data();
    }

    template<class T, class Allocator>
    typename array<T,Allocator>::value_type& array<T,Allocator>::operator[](size_t i) volatile {
        return data()[ i ];
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::value_type& array<T,Allocator>::at(size_type i) volatile {
        if(i >= size()) throw std::out_of_range("array::out_of_range");
        return (*this)[i];
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::value_type& array<T,Allocator>::front() volatile {
        return (*this)[0];
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::value_type& array<T,Allocator>::back() volatile {
        return (*this)[size()-1];
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::iterator array<T,Allocator>::begin() volatile {
        return iterator(const_cast<array&>(*this), 0);
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::iterator array<T,Allocator>::end() volatile {
        return iterator(const_cast<array&>(*this), size());
    }

    template<class T, class Allocator>
    const typename array<T,Allocator>::value_type* array<T,Allocator>::data() const volatile {
        return (value_type*)allocator_.data();
    }

    template<class T, class Allocator>
    const typename array<T,Allocator>::value_type& array<T,Allocator>::operator[](size_t i) const volatile {
        return data()[ i ];
    }

    template<typename T, class Allocator>
    const typename array<T,Allocator>::value_type& array<T,Allocator>::at(size_type i) const volatile {
        if(i >= size()) throw std::out_of_range("array::out_of_range");
        return (*this)[i];
    }

    template<typename T, class Allocator>
    const typename array<T,Allocator>::value_type& array<T,Allocator>::front() const volatile {
        return (*this)[0];
    }

    template<typename T, class Allocator>
    const typename array<T,Allocator>::value_type& array<T,Allocator>::back() const volatile {
        return (*this)[size()-1];
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::const_iterator array<T,Allocator>::cbegin() const volatile {
        return const_iterator(const_cast<const array&>(*this), 0);
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::const_iterator array<T,Allocator>::cend() const volatile {
        return const_iterator(const_cast<const array&>(*this), size());
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::volatile_iterator array<T,Allocator>::vbegin() volatile {
        return volatile_iterator(*this, 0);
    }

    template<typename T, class Allocator>
    typename array<T,Allocator>::volatile_iterator array<T,Allocator>::vend() volatile {
        return volatile_iterator(*this, size());
    }

}

#endif
