/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_CONTAINER_VECTOR_VECTOR_HPP
#define BIND_CONTAINER_VECTOR_VECTOR_HPP

namespace bind {
     
    template<class T, class Allocator> class vector;
    namespace detail {
        template<typename T, typename Allocator>
        void set_size(bind::vector<T,Allocator>& a, const size_t& size){
            a.resize(size);
        }
        template<typename T, typename Allocator>
        void measure_size(const bind::vector<T,Allocator>& a, bind::ptr<size_t>& size){
            *size = a.size();
        }
        template<class T, class Allocator>
        void init_value_vector(volatile bind::vector<T,Allocator>& a, T& value){
            bind::vector<T,Allocator>& a_ = const_cast<bind::vector<T,Allocator>&>(a);
            a_.resize(a_.cached_size());
            for(size_t i = 0; i < a_.size(); ++i) a_[i] = value;
        }
        template<class T, class Allocator, class OtherAllocator = Allocator>
        void copy_vector(volatile bind::vector<T,Allocator>& dst, const bind::vector<T,OtherAllocator>& src, const size_t& n){
            bind::vector<T,Allocator>& dst_ = const_cast<bind::vector<T,Allocator>&>(dst);
            for(size_t i = 0; i < n; ++i) dst_[i] = src[i];
        }
        template<typename T, typename Allocator>
        void add(bind::vector<T,Allocator>& a, const bind::vector<T,Allocator>& b){
            for(int i = 0; i < a.size(); ++i) a[i] += b[i];
        }
    }

    template<class T, class Allocator>
    size_t vector<T,Allocator>::capacity() const {
        return (bind::extent(*this)-sizeof(size_t))/sizeof(T);
    }

    template<class T, class Allocator>
    size_t vector<T,Allocator>::cached_size() const {
        return cached_size_;
    }

    /* prohibited in async mode (sync mode only) */

    template<class T, class Allocator>
    vector<T,Allocator>::vector(size_t n, T value) : bind_allocator(n*sizeof(T)+sizeof(size_t)), cached_size_(n) {
        this->init(value);
    }

    template <typename T, class Allocator>
    vector<T,Allocator>& vector<T,Allocator>::operator = (const vector& rhs){
        vector c(rhs);
        this->swap(c);
        return *this;
    }

    template <typename T, class Allocator>
    template <class OtherAllocator>
    vector<T,Allocator>& vector<T,Allocator>::operator = (const vector<T,OtherAllocator>& rhs){
        vector resized(rhs.capacity());
        this->swap(resized);
        this->cached_size_ = rhs.cached_size();

        if(!bind::weak(rhs)) bind::cpu(detail::copy_vector<T,Allocator,OtherAllocator>, *this, rhs, this->cached_size_);
        return *this;
    }

    template<class T, class Allocator>
    void vector<T,Allocator>::init(T value){
        bind::cpu(detail::init_value_vector<T,Allocator>, *this, value);
    }

    template<typename T, class Allocator>
    void vector<T,Allocator>::auto_reserve(){
        if(this->cached_size() == this->capacity()){
            this->reserve(this->cached_size()*2);
        }
    }

    template<class T, class Allocator>
    void vector<T,Allocator>::reserve(size_t n){
        if(capacity() >= n) return;
        size_t current_size = cached_size();
        vector reserved(n);
        if(!bind::weak(*this)) bind::cpu(detail::copy_vector<T,Allocator>, reserved, *this, current_size);
        this->swap(reserved);
        cached_size_ = current_size;
    }

    template<typename T, class Allocator>
    void vector<T,Allocator>::shrink_to_fit(){
        if(memory::aligned_64(cached_size()*sizeof(T)+sizeof(size_t)) ==
           memory::aligned_64(capacity()*sizeof(T)+sizeof(size_t))) return;

        size_t current_size = cached_size();
        vector shrinked(cached_size());
        if(!bind::weak(*this)) bind::cpu(detail::copy_vector<T,Allocator>, shrinked, *this, current_size);
        this->swap(shrinked);
    }

    template<class T, class Allocator>
    size_t vector<T,Allocator>::measure() const {
        bind::ptr<size_t> measured(0);
        bind::cpu(detail::measure_size<T,Allocator>, *this, measured);
        bind::sync();
        cached_size_ = *measured;
        return cached_size();
    }

    template<typename T, class Allocator>
    void vector<T,Allocator>::load() const {
        bind::load(*this);
    }

    /* using cached size */

    template<class T, class Allocator>
    void vector<T,Allocator>::swap(vector<T,Allocator>& r){
        std::swap(this->cached_size_, r.cached_size_);
        std::swap(this->bind_allocator.after->data, r.bind_allocator.after->data);
    }

    template<class T, class Allocator>
    size_t vector<T,Allocator>::size() const {
        if(this->bind_allocator.after->valid())
            return bind::delegated(*this).size_;
        else
            return cached_size();
    }

    template<class T, class Allocator>
    bool vector<T,Allocator>::empty() const {
        return ((size() == 0) || bind::weak(*this));
    }

    template<class T, class Allocator>
    void vector<T,Allocator>::resize(size_t sz){
        reserve(sz);
        cached_size_ = sz;
        if(this->bind_allocator.after->valid())
            bind::delegated(*this).size_ = sz;
    }

    template<typename T, class Allocator>
    void vector<T,Allocator>::clear(){
        this->resize(0);
    }

    /* using data-access methods (load required if not async) */

    template<class T, class Allocator>
    typename vector<T,Allocator>::value_type* vector<T,Allocator>::data(){
        return bind::delegated(*this).data;
    }

    template<class T, class Allocator>
    typename vector<T,Allocator>::value_type& vector<T,Allocator>::operator[](size_t i){
        return bind::delegated(*this).data[ i ];
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::value_type& vector<T,Allocator>::at(size_type i){
        if(i >= size()) throw std::out_of_range("vector::out_of_range");
        return (*this)[i];
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::value_type& vector<T,Allocator>::front(){
        return (*this)[0];
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::value_type& vector<T,Allocator>::back(){
        return (*this)[size()-1];
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::iterator vector<T,Allocator>::begin(){
        return this->data();
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::iterator vector<T,Allocator>::end(){
        return this->begin()+size();
    }

    template<class T, class Allocator>
    const typename vector<T,Allocator>::value_type* vector<T,Allocator>::data() const {
        return bind::delegated(*this).data;
    }

    template<class T, class Allocator>
    const typename vector<T,Allocator>::value_type& vector<T,Allocator>::operator[](size_t i) const {
        return bind::delegated(*this).data[ i ];
    }

    template<typename T, class Allocator>
    const typename vector<T,Allocator>::value_type& vector<T,Allocator>::at(size_type i) const {
        if(i >= size()) throw std::out_of_range("vector::out_of_range");
        return (*this)[i];
    }

    template<typename T, class Allocator>
    const typename vector<T,Allocator>::value_type& vector<T,Allocator>::front() const {
        return (*this)[0];
    }

    template<typename T, class Allocator>
    const typename vector<T,Allocator>::value_type& vector<T,Allocator>::back() const {
        return (*this)[size()-1];
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::const_iterator vector<T,Allocator>::cbegin() const {
        return this->data();
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::const_iterator vector<T,Allocator>::cend() const {
        return this->begin()+size();
    }

    template<class T, class Allocator>
    void vector<T,Allocator>::push_back(value_type value){
        (*this)[size()] = value;
        bind::delegated(*this).size_++;
    }

    template<class T, class Allocator>
    void vector<T,Allocator>::pop_back(){
        bind::delegated(*this).size_--;
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::iterator vector<T,Allocator>::insert(const_iterator position, value_type val){
        for(int i = size(); i > (position-this->cbegin()); i--) (*this)[i] = (*this)[i-1];
        (*this)[position-this->cbegin()] = val;
        bind::delegated(*this).size_++;
        return (this->begin()+(position-this->cbegin()));
    }

    template<typename T, class Allocator>
    typename vector<T,Allocator>::iterator vector<T,Allocator>::erase(const_iterator position){
        for(int i = (position-this->cbegin()); i < size()-1; i++) (*this)[i] = (*this)[i+1];
        bind::delegated(*this).size_--;
        return (this->begin()+(position-this->cbegin()));
    }

}

#endif
