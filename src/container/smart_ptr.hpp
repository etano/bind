/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_CONTAINER_SMART_PTR
#define BIND_CONTAINER_SMART_PTR

namespace bind {

    using model::any;
    using model::sizeof_any;

    template <typename T>
    class smart_ptr {
    protected:
        typedef T element_type;
       ~smart_ptr(){
           if(impl) bind::collect(impl); 
        }
        smart_ptr(element_type val){
            impl = new (memory::cpu::standard::calloc<sizeof_any<T>()>()) any(val);
        }
        smart_ptr(const smart_ptr& f){
            impl = new (memory::cpu::standard::calloc<sizeof_any<T>()>()) any((element_type&)*f);
            impl->origin = f.impl;
        }
        smart_ptr(smart_ptr&& f){
            impl = f.impl; f.impl = NULL; 
        }
        smart_ptr& operator= (const smart_ptr& f){
            *impl = (element_type&)*f;
            impl->origin = f.impl;
            return *this;
        }
        smart_ptr& operator= (smart_ptr&& f){ 
            std::swap(impl, f.impl);
            return *this;
        }
        template<typename S>
        smart_ptr& operator= (const S& val) = delete;
    public:
        T& operator* () const volatile {
            return *impl;
        }
        void resit() const {
            smart_ptr clone(*this);
            std::swap(this->impl, clone.impl);
            this->impl->origin = clone.impl;
        }
        mutable any* impl;
    };

    template<typename T>
    class shared_ptr : public smart_ptr<T> {
    public:
        typedef typename smart_ptr<T>::element_type element_type;
        template <typename U>
        shared_ptr(U&& arg) : smart_ptr<T>(std::forward<U>(arg)) {}
    };

    template<class T>
    std::ostream& operator << (std::ostream& os, const smart_ptr<T>& obj){
        os << *obj;
        return os;
    }
}

#endif
