/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_INTERFACE_MODIFIERS_DISPATCH
#define BIND_INTERFACE_MODIFIERS_DISPATCH

namespace bind {
    namespace detail {
        template<typename T>
        constexpr bool compact(){ return sizeof(T) <= sizeof(void*); }

        template <typename T> struct has_versioning {
            template <typename T1> static typename T1::allocator_type::bind_type test(int);
            template <typename> static void test(...);
            enum { value = !std::is_void<decltype(test<T>(0))>::value };
        };
        template <bool Versioned, typename T> struct get_modifier { typedef singular_modifier< T, compact<T>() > type; };
        template<typename T> struct get_modifier<true, T> { typedef versioned_modifier< T > type; };

        template <bool Versioned, typename T> struct const_get_modifier { typedef singular_modifier< const T, compact<T>() > type; };
        template<typename T> struct const_get_modifier<true, T> { typedef const_versioned_modifier< const T > type; };

        template <bool Versioned, typename T> struct volatile_get_modifier { typedef singular_modifier< volatile T, compact<T>() > type; };
        template<typename T> struct volatile_get_modifier<true, T> { typedef volatile_versioned_modifier< volatile T > type; };
    }

    template <typename T> class proxy_iterator;
    template <typename T> class shared_ptr;

    template <typename T> struct modifier {
        typedef typename detail::get_modifier<detail::has_versioning<T>::value,T>::type type;
    };
    template <typename T> struct modifier <const T> {
        typedef typename detail::const_get_modifier<detail::has_versioning<T>::value,T>::type type;
    };
    template <typename T> struct modifier <volatile T> {
        typedef typename detail::volatile_get_modifier<detail::has_versioning<T>::value,T>::type type;
    };
    template <typename S> struct modifier < shared_ptr<S> > {
        typedef shared_ptr_modifier< shared_ptr<S> > type; 
    };
    template <typename S> struct modifier < const shared_ptr<S> > {
        typedef const_shared_ptr_modifier< const shared_ptr<S> > type; 
    };
    template <typename S> struct modifier < volatile shared_ptr<S> > {
        typedef volatile_shared_ptr_modifier< volatile shared_ptr<S> > type; 
    };
    template <typename S> struct modifier < proxy_iterator<S> > {
        typedef iterator_modifier<proxy_iterator<S> > type;
    };
}

#endif
